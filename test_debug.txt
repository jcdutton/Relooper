#include "Relooper.h"
int main() {
  char buffer[100000];
  rl_set_output_buffer(buffer);
  void *block_map[10000];
  void *rl = rl_new_relooper();
  void *b0 = rl_new_block("ep");
  block_map[0] = b0;
  rl_relooper_add_block(rl, block_map[0]);
  void *b1 = rl_new_block("LBB1");
  block_map[1] = b1;
  rl_relooper_add_block(rl, block_map[1]);
  void *b2 = rl_new_block("LBB2");
  block_map[2] = b2;
  rl_relooper_add_block(rl, block_map[2]);
  void *b3 = rl_new_block("LBB3");
  block_map[3] = b3;
  rl_relooper_add_block(rl, block_map[3]);
  rl_block_add_branch_to(block_map[0], block_map[1], "ep -> LBB1");
  rl_block_add_branch_to(block_map[0], block_map[3], "ep -> LBB3");
  rl_block_add_branch_to(block_map[1], block_map[2], "LBB1 -> LBB2");
  rl_block_add_branch_to(block_map[1], block_map[3], "LBB1 -> LBB3");
  rl_block_add_branch_to(block_map[2], block_map[3], "LBB2 -> LBB3");
  rl_relooper_calculate(rl, block_map[0]);
  rl_relooper_render(rl);
  rl_delete_relooper(rl);
  puts(buffer);
  return 0;
}
// Adding block 0
//   with branch out to 1
//   with branch out to 3
// Adding block 1
//   with branch out to 2
//   with branch out to 3
// Adding block 2
//   with branch out to 3
// Adding block 3
// Process() called
  blocks :  0 1 2 3 
  entries:  0 
// creating simple block with block #0
// Solipsizing branches into 1
  relevant to solipsize:  0 
//   eliminated branch from 0
// Solipsizing branches into 3
  relevant to solipsize:  0 
//   eliminated branch from 0
// Process() called
  blocks :  1 2 3 
  entries:  1 3 
// Investigated independent groups:
 group:  1 2 
// Independent groups: 1
// Handleable independent groups: 1
// creating multiple block with 1 inner groups
//   multiple group with entry 1:
     1 2 
// Solipsizing branches into 3
  relevant to solipsize:  1 2 
//   eliminated branch from 1
//   eliminated branch from 2
// Process() called
  blocks :  1 2 
  entries:  1 
// creating simple block with block #1
// Solipsizing branches into 2
  relevant to solipsize:  1 
//   eliminated branch from 1
// Process() called
  blocks :  2 
  entries:  2 
// creating simple block with block #2
  remaining blocks after multiple: 3 
// Process() called
  blocks :  3 
  entries:  3 
// creating simple block with block #3
ep
if (ep -> LBB1) {
  label = 1;
  /* direct */
} else if (ep -> LBB3) {
  label = 3;
  /* direct */
}
L1: do {
  if (label == 1) {
    LBB1
    if (LBB1 -> LBB2) {
      label = 2;
      /* direct */
    } else if (LBB1 -> LBB3) {
      label = 3;
      break L1;
    }
    LBB2
    label = 3;
    break L1;
  }
} while(0);
LBB3

